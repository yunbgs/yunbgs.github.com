---
layout: post
title: "C语言一例子（参数执行顺序，变量存储类型）"
date: 2013-05-31 14:23
comments: true
categories: C
---
3个小例子说明实际细节问题，局部变量存在栈中会被编译器优化(从cache或寄存器中读取)，static变量存储在静态区不会被优化，volatile变量存在栈区但它告诉程序每次都要去存放的地方读取。

    #include <stdio.h>
    
    int
    test(int x,int y,int z){
    printf("x=%d,y=%d,z=%d\n",x,y,z);
    return 0;
    }
    int
    main(){
    int t=1;
    test(t++,t,t++);
    printf("%d,%d,%d\n",t++,t,t++);
    return;
    }

打印结果：
> x=2,y=3,z=1
> 4,5,3

    #include <stdio.h>
    
    int
    test(int x,int y,int z){
    printf("x=%d,y=%d,z=%d\n",x,y,z);
    return 0;
    }
    int
    main(){
    static int t=1;
    test(t++,t,t++);
    printf("%d,%d,%d\n",t++,t,t++);
    return;
    }
打印结果：
> x=2,y=2,z=1
> 4,4,3

    #include <stdio.h>
    
    int
    test(int x,int y,int z){
    printf("x=%d,y=%d,z=%d\n",x,y,z);
    return 0;
    }
    int
    main(){
    volatile int t=1;
    test(t++,t,t++);
    printf("%d,%d,%d\n",t++,t,t++);
    return;
    }
打印结果：
> x=2,y=2,z=1
> 4,4,3

volatile定义的变量会在程序外被改变,每次都必须从内存中读取，而不能重复使用放在cache或寄存器中的备份。
同时说明局部变量被优化后结果出现异常。
